# simple namespace 1

--Input
(ns com.example.my-app)
--Input

--Expected
{
  "nsSymbol": "com.example.my-app"
}
--Expected

# simple namespace 2

--Input
(
  ns com.example.my-app

)
--Input

--Expected
{
  "nsSymbol": "com.example.my-app"
}
--Expected

# namespace with multiple :require

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb [com.example.my-app.ccc])
  (:require com.example.my-app.aaa)
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# namespace with require + imports

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb com.example.my-app.ccc com.example.my-app.aaa)
  (:import java.io.File
           (xxx.yyy.zzz Bravo Alpha Delta Charlie)
           hhh.eee.Ccc
           hhh.eee.Bbb
           (java.util Date UUID))
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "imports": [
    {
      "package": "hhh.eee",
      "classes": ["Bbb", "Ccc"]
    },
    {
      "package": "java.io",
      "classes": ["File"]
    },
    {
      "package": "java.util",
      "classes": ["Date", "UUID"]
    },
    {
      "package": "xxx.yyy.zzz",
      "classes": ["Alpha", "Bravo", "Charlie", "Delta"]
    }
  ],
  "requires": [
    {
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# namespace with :require :as

--Input
(ns com.example.my-app
  (:require com.example.my-app.bbb [com.example.my-app.ccc :as ccc])
  (:require [com.example.my-app.aaa :as aaa)
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "as": "aaa",
      "symbol": "com.example.my-app.aaa"
    },
    {
      "symbol": "com.example.my-app.bbb"
    },
    {
      "as": "ccc",
      "symbol": "com.example.my-app.ccc"
    }
  ]
}
--Expected

# namespace with :refer-clojure :exclude

--Input
(ns com.example.my-app
  (:refer-clojure :exclude [print get nth]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "exclude": ["get", "nth", "print"]
  }
}
--Expected

# namespace with :refer-clojure :only

--Input
(ns com.example.my-app
  (:refer-clojure :only [set conj number? get ==]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "only": ["==", "conj", "get", "number?", "set"]
  }
}
--Expected

# namespace with :refer-clojure :rename

--Input
(ns com.example.my-app
  (:require bbb.ccc bbb, aaa)
  (:refer-clojure :rename {print core-print get g,  number? is-number ->> thread-last}
  )
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojure": {
    "rename": [["->>", "thread-last"], ["get", "g"], ["number?", "is-number"], ["print", "core-print"]]
  },
  "requires": [
    {
      "symbol": "aaa"
    },
    {
      "symbol": "bbb"
    },
    {
      "symbol": "bbb.ccc"
    }
  ]
}
--Expected

# namespace with :require, :refer, :as

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "symbol": "com.example.duck",
      "refer": ["eat", "quack", "quacking", "sleep"]
    }
  ]
}
--Expected

# namespace with :require :refer :all

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "symbol": "com.example.duck",
      "refer": "all"
    }
  ]
}
--Expected

# namespace with docstring

--Input
(ns com.example.my-app
  "Mary had a little lamb
  Its fleece was white as snow")
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "docstring": "Mary had a little lamb\n  Its fleece was white as snow"
}
--Expected

# namespace with require comments

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]] ; NOTE: this ns is primarily focused on Mallards
    ;; include aaa.bbb for reasons
;; please see Issue #NaN for deeper explanation
    aaa.bbb
    ;; the cow namespace is deprecated, please refactor
    [com.example.cow :refer [moo eat-grass] :as cow]) ;; the cow goes "moo"
    )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "commentsAbove": [
        ";; include aaa.bbb for reasons",
        ";; please see Issue #NaN for deeper explanation"
      ],
      "symbol": "aaa.bbb"
    },
    {
      "as": "cow",
      "commentsAbove": [";; the cow namespace is deprecated, please refactor"],
      "commentAfter": ";; the cow goes \"moo\"",
      "symbol": "com.example.cow",
      "refer": ["eat-grass", "moo"]
    },
    {
      "as": "duck",
      "commentAfter": "; NOTE: this ns is primarily focused on Mallards",
      "symbol": "com.example.duck",
      "refer": ["eat", "quack", "quacking", "sleep"]
    }
  ]
}
--Expected

# namespace with import comments

> NOTE: in this test case, the ";; fin" comment is ignored by the parser
> We should probably print it after the (ns) form

--Input
(ns com.example.my-app
  ;;; I'm a little teapot
  ;;; Short and stout
  (:import ; Here is my handle

  ;; Here is my spout
;; When I get all steamed up
     (java.util Date UUID) ; Hear me shout
     ;; Tip me over
     ;; And pour me out!
     aaa.bbb.Ccc ;; HTTP 418
;; fin
  )
  )
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "importCommentsAbove": [
    ";;; I'm a little teapot",
    ";;; Short and stout"
  ],
  "importCommentAfter": "; Here is my handle",
  "imports": [
    {
      "classes": ["Ccc"],
      "commentsAbove": [
        ";; Tip me over",
        ";; And pour me out!"
      ],
      "commentAfter": ";; HTTP 418",
      "package": "aaa.bbb"
    },
    {
      "commentsAbove": [
        ";; Here is my spout",
        ";; When I get all steamed up"
      ],
      "commentAfter": "; Hear me shout",
      "classes": ["Date", "UUID"],
      "package": "java.util"
    }
  ]
}
--Expected

# namespace with refer-clojure comments

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:refer-clojure :only [number? -> set])) ; ccc
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "referClojureCommentsAbove": [
    ";; aaa",
    ";; bbb"
  ],
  "referClojureCommentAfter": "; ccc",
  "referClojure": {
    "only": ["->", "number?", "set"]
  },
  "commentOutsideNsForm": "; ccc"
}
--Expected

> TODO: need a test for ns.requireCommentsAbove

# namespace with comment outside ns form

--Input
(ns com.example.my-app
  ;; aaa
  ;; bbb
  (:require [aaa :as a])) ;; if only it were this easy
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requireCommentsAbove": [
    ";; aaa",
    ";; bbb"
  ],
  "requires": [
    {
      "as": "a",
      "commentAfter": ";; if only it were this easy",
      "symbol": "aaa"
    }
  ],
  "commentOutsideNsForm": ";; if only it were this easy"
}
--Expected

# expand prefix lists in require

--Input
(ns com.example.my-app
  (:require
    (com.example client server routes)
    com.example.aaa
    [com.example bbb ccc]
    [com.example.xxx zzz yyy]
    ))
--Input

--Expected
{
  "nsSymbol": "com.example.my-app",
  "requires": [
    {
      "symbol": "com.example.aaa"
    },
    {
      "symbol": "com.example.bbb"
    },
    {
      "symbol": "com.example.ccc"
    },
    {
      "symbol": "com.example.client"
    },
    {
      "symbol": "com.example.routes"
    },
    {
      "symbol": "com.example.server"
    },
    {
      "symbol": "com.example.xxx.yyy"
    },
    {
      "symbol": "com.example.xxx.zzz"
    }
  ]
}
--Expected
