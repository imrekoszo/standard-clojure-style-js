# Simple namespace

--Input
(ns aaa)
--Input

--Expected
(ns aaa)
--Expected

# Simple namespace 2

--Input

(
  ns aaa
)
--Input

--Expected
(ns aaa)
--Expected

# how to ns: use keywords, not symbols

--Input
(ns com.example.my-application
  (refer-clojure :exclude [get])
  (require
   [clojure.string :as string])
  (import
   (java.util Date)))

(require
  foo
  bar)
--Input

--Expected
(ns com.example.my-application
  (:refer-clojure :exclude [get])
  (:require
    [clojure.string :as string])
  (:import
    (java.util Date)))

(require
  foo
  bar)
--Expected

# how to ns: use vectors, not lists

--Input
(ns com.example.application
  [:require
   [clojure.string :as string]]
  [:import
   (java.util Date)])

[:require
  foo
  bar]
--Input

--Expected
(ns com.example.application
  (:require
    [clojure.string :as string])
  (:import
    (java.util Date)))

[:require
 foo
 bar]
--Expected

# how to ns: use vectors for require

--Input
(ns com.example.application
  (:require
   (clojure.string :as string))
  [:import
   (java.util Date)])
--Input

--Expected
(ns com.example.application
  (:require
    [clojure.string :as string])
  (:import
    (java.util Date)))
--Expected

# how to ns: use parenthesis for import

--Input
(ns com.example.application
[:import
 [java.util Date UUID]
 [java.io File]])
--Input

--Expected
(ns com.example.application
  (:import
    (java.io File)
    (java.util Date UUID)))
--Expected

# how to ns: alphabetically sort requires

--Input
;; something before

(ns foo
  (:require b [c])
  (:require a))

(something :after)
--Input

--Expected
;; something before

(ns foo
  (:require
    [a]
    [b]
    [c]))

(something :after)
--Expected

# how to ns: sort imports

--Input
(ns com.example.my-app

  (:import java.io.File
           (xxx.yyy.zzz Bravo Alpha Delta Charlie)
           hhh.eee.Ccc
           hhh.eee.Bbb
           (java.util Date UUID))
  (:require com.example.my-app.bbb com.example.my-app.ccc com.example.my-app.aaa)
  )
--Input

--Expected
(ns com.example.my-app
  (:require
    [com.example.my-app.aaa]
    [com.example.my-app.bbb]
    [com.example.my-app.ccc])
  (:import
    (hhh.eee Bbb Ccc)
    (java.io File)
    (java.util Date UUID)
    (xxx.yyy.zzz Alpha Bravo Charlie Delta)))
--Expected

# how to ns: sort refer-clojure, require, import

--Input
(ns foo "bar"
  (:require b c a)
  (:import (java.util Date))
  (:refer-clojure :exclude [get ->])
  )
--Input

--Expected
(ns foo
  "bar"
  (:refer-clojure :exclude [-> get])
  (:require
    [a]
    [b]
    [c])
  (:import
    (java.util Date)))
--Expected

# sort refer-clojure :only symbols

--Input
(ns foo
  (:require bbb aaa)
  (:refer-clojure :only [get -> number? == *])
  )
--Input

--Expected
(ns foo
  (:refer-clojure :only [* -> == get number?])
  (:require
    [aaa]
    [bbb]))
--Expected

# sort refer-clojure :rename symbols

--Input
(ns foo
  (:require bbb.ccc bbb, aaa)
    (:import (java.util UUID Date))
  (:refer-clojure :rename {print core-print get g,  number? is-number
                           ->> thread-last, -> thread-first}
  )
  )
--Input

--Expected
(ns foo
  (:refer-clojure :rename {-> thread-first, ->> thread-last, get g, number? is-number, print core-print})
  (:require
    [aaa]
    [bbb]
    [bbb.ccc])
  (:import
    (java.util Date UUID)))
--Expected

# how to ns: require, as, refer

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer [quack quacking eat sleep]]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]))
--Input

--Expected
(ns com.example.my-app
  (:require
    [aaa.bbb]
    [com.example.cow :as cow :refer [eat-grass moo]]
    [com.example.duck :as duck :refer [eat quack quacking sleep]]))
--Expected

# ns with :refer :all

--Input
(ns com.example.my-app
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    [com.example.cow :refer [moo eat-grass] :as cow]
    [com.example.pig :refer :all]))
--Input

--Expected
(ns com.example.my-app
  (:require
    [aaa.bbb]
    [com.example.cow :as cow :refer [eat-grass moo]]
    [com.example.duck :as duck :refer :all]
    [com.example.pig :refer :all]))
--Expected

# ns with docstring

--Input
(ns com.example.my-app

  "Mary had a little lamb,
  Its fleece was white as snow.

  And everywhere that Mary went,
  The lamb was sure to go."
  (:require
    [com.example.duck :as duck :refer :all]
    aaa.bbb
    aaa))
--Input

--Expected
(ns com.example.my-app
  "Mary had a little lamb,
  Its fleece was white as snow.

  And everywhere that Mary went,
  The lamb was sure to go."
  (:require
    [aaa]
    [aaa.bbb]
    [com.example.duck :as duck :refer :all]))
--Expected

# ns with require comments

--Input
;; before

(ns com.example.my-app
;; foo bar
    ;; bizzle wizzle
  (:require
 ;; C
 ;; CC
 ;; CCC
 ccc ;; ccc
    [aaa.bbb :as ab] ; abab
    aaa)) ;;;; aaa

:after
--Input

--Expected
;; before

(ns com.example.my-app
  ;; foo bar
  ;; bizzle wizzle
  (:require
    [aaa] ;;;; aaa
    [aaa.bbb :as ab] ; abab
    ;; C
    ;; CC
    ;; CCC
    [ccc])) ;; ccc

:after
--Expected

# ns with prefix list

--Input
(ns com.example.my-app
  (:require
 ;; aaa
 ;; bbb
    (com.example server client routes) ;; ccc
    com.example.db
    [com.example alpha bravo])) ;; ddd
--Input

--Expected
(ns com.example.my-app
  (:require
    [com.example.alpha] ;; ddd
    [com.example.bravo]
    ;; aaa
    ;; bbb
    [com.example.client] ;; ccc
    [com.example.db]
    [com.example.routes]
    [com.example.server]))
--Expected

# ns with reader conditionals 1

--Input
(ns com.example.my-app
  (:require
    com.example.bbb
    #?(:cljs [com.example.aaa])
    #?(:clj  [com.example.ccc])
    com.example.ddd
    ))
--Input

--Expected
(ns com.example.my-app
  (:require
    [com.example.bbb]
    [com.example.ddd]
    #?(:clj [com.example.ccc]
       :cljs [com.example.aaa])))
--Expected

# ns with reader conditionals 2

--Input
(ns com.example.my-app
  (:require
    #?(:clj  [com.example.eee]
       :cljs [com.example.ddd :as d])
    com.example.fff
    #?(:cljs com.example.bbb)
    com.example.ccc
    #?(:clj com.example.aaa)
    ))
--Input

--Expected
(ns com.example.my-app
  (:require
    [com.example.ccc]
    [com.example.fff]
    #?@(:clj
        [[com.example.aaa]
         [com.example.eee]]

        :cljs
        [[com.example.bbb]
         [com.example.ddd :as d]])))
--Expected

# ns with reader conditionals 3

--Input
(ns com.example.module-test
  (:require #?(:clj  [clojure.test :refer :all]
               :cljs [cljs.test :refer-macros [is]])
            #?(:cljs [cljs.test.check :refer [quick-check]]) ;; aaa
            #?(:clj  [clojure.test.check.clojure-test :refer [defspec]]
               :cljs [cljs.test.check.cljs-test :refer-macros [defspec]])
            #?(:clj  [clojure.test.check.properties :as prop]
               :cljs [cljs.test.check.properties :as prop
                       :include-macros true])
            [schema.core :as schema :refer [check]]
            [com.example.schema.ids :refer [Foo]]
            [com.example.generators
             :refer [gen-part-no gen-invalid-part-no]]))
--Input

--Expected
(ns com.example.module-test
  (:require
    [com.example.generators :refer [gen-invalid-part-no gen-part-no]]
    [com.example.schema.ids :refer [Foo]]
    [schema.core :as schema :refer [check]]
    #?@(:clj
        [[clojure.test :refer :all]
         [clojure.test.check.clojure-test :refer [defspec]]
         [clojure.test.check.properties :as prop]]

        :cljs
        [[cljs.test :refer-macros [is]]
         [cljs.test.check :refer [quick-check]] ;; aaa
         [cljs.test.check.cljs-test :refer-macros [defspec]]
         [cljs.test.check.properties :as prop :include-macros true]])))
--Expected
